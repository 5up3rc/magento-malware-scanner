import os
import sys
import argparse
import psutil
import yara

LAST_RUN_FILE = '.magento-malware-scanner-last-run'
YARA_RULES_FILE = os.path.expanduser('~/.magento-malware-scanner.yar')


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="Scan for hidden malware.",
    )
    parser.add_argument('path', help='File or dir to (recursively) process')
    parser.add_argument('-r', '--rules', help='Yara rules file.', default=YARA_RULES_FILE)
    parser.add_argument('-n', '--newonly', help='Only consider files that were modified/created since last succesful run. To maintain state, I will create a %s file under the given path. Useful for cron.' % LAST_RUN_FILE, action='store_true')
    args = parser.parse_args()

    if args.newonly and not os.path.isdir(args.path):
        logging.error('I can only use --newonly on a directory!')
        sys.exit(1)

    if not os.path.exists(args.path):
        logging.error('{} does not exist!'.format(args.path))
        sys.exit(1)

    return args


def find_last_run_timestamp(path):
    fname = os.path.join(path, LAST_RUN_FILE)

    if not os.path.isdir(path):
        return None

    if not os.path.isfile(fname):
        return None

    return os.path.getmtime(path)


def write_last_run_timestamp(path):
    fname = os.path.join(path, LAST_RUN_FILE)

    if os.path.exists(fname):
        os.unlink(fname)

    return open(fname, 'a').close()


def find_targets(root_path, ignore_older_than=None):
    """
     Produce an iterator for all the relevant files recursively found under root_path.
     If root_path is a file, return an iterator with just that.
     Param ignore_older_than is an epoch timestamp from os.path.getmtime()
    """

    if os.path.isfile(root_path):
        yield root_path

    if not os.path.isdir(root_path):
        raise RuntimeError("%s is not a file or directory" % root_path)

    for root, dirs, files in os.walk(root_path):
        for myfile in files:
            path = os.path.join(root, myfile)

            # if os.stat(path).st_size < MINSIZE:
            #     continue

            if ignore_older_than is not None:
                if os.path.getmtime(path) < ignore_older_than:
                    continue

            yield path




def main():
    args = parse_args()

    if not os.path.exists(args.rules):
        print("Rules file {} does not exist. Use --rules <path>".format(args.rules))
        sys.exit(1)

    if args.newonly:
        ignore_older_than = find_last_run_timestamp(args.path)
    else:
        ignore_older_than = None

    # don't swamp the machine
    mylife = psutil.Process()
    mylife.ionice(psutil.IOPRIO_CLASS_IDLE)

    rules = yara.compile(args.rules, includes=True)
    
    try:
        num_files = 0
        for path in find_targets(args.path, ignore_older_than=ignore_older_than):
            num_files += 1
            matches = rules.match(path)
            for m in matches:
                print(m, path)
        
        if args.newonly:
            write_last_run_timestamp(args.path)

    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    sys.exit(main())